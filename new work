#final_array=()

for packagedComponentId in "${pack_array[@]}"; do
    output=""
    for value in "${my_array[@]}"; do
        #echo "$packagedComponentId"
        #echo "and"
        #echo "$value"
        if [ "$packagedComponentId" == "$value" ]; then
            output="value found"
            break
        fi
    done
    if [ "$output" != "value found" ]; then
        echo "$packagedComponentId"
        echo "not deployed"
    fi
done






jq: error (at /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json:64): Cannot iterate over null (null)
Updated /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json with new values.



echo "Iterate over each found JSON file:"
for found_file in "${found_files[@]}"; do
    # Check if the .connections object exists
    if jq -e '.connections' "$found_file" > /dev/null; then
        # Check if the .connections.connection array exists and is not null
        if jq -e '.connections.connection | length > 0' "$found_file" > /dev/null; then
            # Display the contents of the file before the update
            echo "Contents of $found_file before update:"
            cat "$found_file"

            # Update the JSON file with GitHub variables and secrets
            jq --arg GITHUB_Proview_URL "$GITHUB_Proview_URL" --arg GITHUB_SECRET "$GITHUB_SECRET" '
                .connections.connection[] |= (
                    if .field[].id == "url" then .field[].value = $GITHUB_Proview_URL else . end
                ) | (
                    if .field[].id == "password" then .field[].value = $GITHUB_SECRET else . end
                )
            ' "$found_file" > temp.json && mv temp.json "$found_file"
            echo "Updated $found_file with new values."

            # Display the contents of the file after the update
            echo "Contents of $found_file after update:"
            cat "$found_file"
        else
            echo "No or empty connections found in $found_file. Skipping update."
        fi
    else
        echo "No connections object found in $found_file. Skipping update."
    fi
done


values=$(jq -r 'recurse | strings' 23423dfgd-57f4-47c8-b861-bf60ee85621c.json | grep '^\$')
          echo $values

define the new values:
Iterate over each found JSON file:
jq: error (at /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json:64): boolean (true) has no length
No or empty connections found in /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json. Skipping update.


parse error: Invalid numeric literal at line 1, column 4
Error: Process completed with exit code 4.

for i in $values; do
           RESULT=$(echo $i | awk '{gsub(/\$|\{|\}/, ""); print}')
           echo $RESULT 
           echo "secrets.$RESULT"
           val=$(echo  "secrets.$RESULT")
           val='${{'$val'}}'
           echo $val
           
          done





https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/


# This workflow will initiate a Veracode Static Analysis

name: Veracode Static Analysis

# Controls when the workflow will run
on:

  push:
    branches: [ development ]

  # Workflow is triggered at
  #  first of every month
  schedule:
    - cron: '0 0 1 * *'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  #  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        repository: ''

    - name: Zip files
      run: |
        zip -r veracode.zip *
        mkdir zip && cp veracode.zip zip
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%d-%B-%Y')"

    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: zip/*.zip
    - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
      with:
        filepath: 'zip/'
        vid: '${{ secrets.VERACODE_API_ID }}'
        vkey: '${{ secrets.VERACODE_API_KEY }}'  
        version: "Version ${{ steps.date.outputs.date }}"  
        appname: "Tax&AccountingUK"
        scanallnonfataltoplevelmodules: true
        criticality: 'VeryHigh'
        createprofile: false


name: Snyk Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  snyk:
    name: Run Snyk to check for vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0' # Specify the PHP version you are using

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          php -r "unlink('composer-setup.php');"

      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/setup@v2
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: monitor # Use 'test' to fail the build if vulnerabilities are found, or 'monitor' to only report

      - name: Run Snyk to check for vulnerabilities in composer.lock
        uses: snyk/actions/setup@v2
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --file=composer.lock --package-manager=composer




***********************
- name: Install PHP and necessary packages
        run: |
          sudo apt-get update
          sudo apt-get install -y php-cli

********************
   - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --quiet
          RESULT=$?
          rm composer-setup.php
          mv composer.phar /usr/local/bin/composer
          chmod +x /usr/local/bin/composer
          composer --version  # Verify Composer installation
          exit $RESULT


name: Example workflow for PHP using Snyk
on: push
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
