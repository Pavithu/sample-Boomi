name: List Files 

on: [push]

jobs:
  list-files:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: List files in a directory 
        run: | 
          cd /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/
          file_array=()
          for file in $(ls | cut -d '.' -f 1); do
            file_array+=("$file")
          done
          echo "Filenames in an array:"
          echo "${file_array[@]}"

          cd /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/Deploy/
          echo "Deploy Packaged Component Id"
          cat Packaged_Component.json
          pckg=$(jq -r '.[].packagedComponentId' Packaged_Component.json)

          found_files=() 

          for file in "${file_array[@]}"; do
            for component in $pckg; do
              if [ "$file" == "$component" ]; then
                found_files+=($(find /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/ -name "${file}.json"))
              fi
            done
          done
          echo "Found files:"
          echo "${found_files[@]}"

          echo "Opening contents of each found file:"
          for file_path in "${found_files[@]}"; do
            echo "$file_path"
            cat "$file_path"
            echo  # Add newline for readability
          done 





           echo "Define the new values:"
          GITHUB_Proview_URL="${{ env.MYGIT_VARIABLE_SAMPLE }}"
          GITHUB_SECRET="${{ secrets.GIT_SECRET }}"

          echo "Iterating over each found JSON file:"
          for file_path in "${found_files[@]}"; do
            if [ -f "$file_path" ]; then
              echo "Updating $file_path with new values."
              jq --arg GITHUB_Proview_URL "$GITHUB_Proview_URL" --arg GITHUB_SECRET "$GITHUB_SECRET" '
                .connections.connection[] |= (
                  if .field[].id == "url" then .field[].value = $GITHUB_Proview_URL else . end
                ) | (
                  if .field[].id == "password" then .field[].value = $GITHUB_SECRET else . end
                )
              ' "$file_path" > temp.json && mv temp.json "$file_path"
            else
              echo "File $file_path not found."
            fi
          done

Define the new values:
Iterating over each found JSON file:
Updating /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json with new values.
jq: error (at /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json:64): Cannot iterate over null (null)
Error: Process completed with exit code 5.


          echo "Define the new values:"
          GITHUB_Proview_URL="${{ env.MYGIT_VARIABLE_SAMPLE }}"
          GITHUB_SECRET="${{ secrets.GIT_SECRET }}"

          echo "Iterating over each found JSON file:"
          for file_path in "${found_files[@]}"; do
            if [ -f "$file_path" ]; then
              echo "Updating $file_path with new values."
              # Check if the .connections.connection array exists and is not empty
              if jq -e '.connections.connection | length > 0' "$file_path" > /dev/null; then
                # Update the JSON file with GitHub variables and secrets
                jq --arg GITHUB_Proview_URL "$GITHUB_Proview_URL" --arg GITHUB_SECRET "$GITHUB_SECRET" '
                  .connections.connection[] |= (
                    if .field[].id == "url" then .field[].value = $GITHUB_Proview_URL else . end
                  ) | (
                    if .field[].id == "password" then .field[].value = $GITHUB_SECRET else . end
                  )
                ' "$file_path" > temp.json && mv temp.json "$file_path"
              else
                echo "No connections found in $file_path. Skipping update."
              fi
            else
              echo "File $file_path not found."
            fi
          done

Iterating over each found JSON file:
Updating /home/runner/work/aiid205223-sample-Boomi-CICD/aiid205223-sample-Boomi-CICD/JAN2024CE/QA/UpdateExtensions/32fsdfda-57f4-47c8-b861-bf60ee85621c.json with new values.
Error: Process completed with exit code 5.

  echo "Define the new values:"
          GITHUB_Proview_URL="${{ env.MYGIT_VARIABLE_SAMPLE }}"
          GITHUB_SECRET="${{ secrets.GIT_SECRET }}"

          echo "Iterating over each found JSON file:"
          for file_path in "${found_files[@]}"; do
            if [ -f "$file_path" ]; then
              echo "Updating $file_path with new values."
              # Check if the .connections.connection array exists and is not empty
              if jq -e '.connections.connection | length > 0' "$file_path" > /dev/null; then
                # Update the JSON file with GitHub variables and secrets
                jq --arg GITHUB_Proview_URL "$GITHUB_Proview_URL" --arg GITHUB_SECRET "$GITHUB_SECRET" '
                  if has("connections") and .connections | has("connection") then
                    .connections.connection[] |= (
                      if .field[].id == "url" then .field[].value = $GITHUB_Proview_URL else . end
                    ) | (
                      if .field[].id == "password" then .field[].value = $GITHUB_SECRET else . end
                    )
                  else
                    .
                  end
                ' "$file_path" > temp.json && mv temp.json "$file_path"
              else
                echo "No connections found in $file_path. Skipping update."
              fi
            else
              echo "File $file_path not found."
            fi
          done




 # Define the new values
          GITHUB_Proview_URL="${{ env.MYGIT_VARIABLE_SAMPLE }}"
          GITHUB_SECRET="${{ secrets.GIT_SECRET }}"

          # Iterate over each found JSON file
          for file_path in *.json; do
            if [ -f "$file_path" ]; then
              echo "Updating $file_path with new values."
              # Update the JSON file with GitHub variables and secrets
              jq --arg GITHUB_Proview_URL "$GITHUB_Proview_URL" --arg GITHUB_SECRET "$GITHUB_SECRET" '
                if has("connections") and .connections | has("connection") then
                  .connections.connection[] |= (
                    if .field[].id == "url" then .field[].value = $GITHUB_Proview_URL else . end
                  ) | (
                    if .field[].id == "password" then .field[].value = $GITHUB_SECRET else . end
                  )
                else
                  .
                end
              ' "$file_path" > temp.json && mv temp.json "$file_path"
            else
              echo "File $file_path not found."
            fi
          done

          GITHUB_Proview_URL=$(cat path_to_GITHUB_Proview_URL_file)
GITHUB_SECRET=$(cat path_to_GITHUB_SECRET_file)




# Use jq to extract "value" fields and populate the array
while IFS= read -r value; do
    Decrypt_array+=("$value")
done < <(jq -r '.. | .value? // empty' "$json_file")

# Display the values in the Decrypt_array
echo "Decrypted values:"
printf '%s\n' "${Decrypt_array[@]}"
